<?php
/**
 * CommandProgressStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  HapiCommand
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * HAPI Command API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HapiCommand\Model;

use \ArrayAccess;
use \HapiCommand\ObjectSerializer;

/**
 * CommandProgressStatus Class Doc Comment
 *
 * @category Class
 * @package  HapiCommand
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommandProgressStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CommandProgressStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'entity' => 'string',
        'action' => 'string',
        'cancellation_id' => 'string',
        'reservation_id' => 'string',
        'booking_confirmation_id' => 'string',
        'profile_id' => 'string',
        'profile_ids' => 'string[]',
        'allotment_id' => 'string',
        'status' => 'string',
        'message' => 'string',
        'created' => '\DateTime',
        'completed' => '\DateTime',
        'entity_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'entity' => null,
        'action' => null,
        'cancellation_id' => null,
        'reservation_id' => null,
        'booking_confirmation_id' => null,
        'profile_id' => null,
        'profile_ids' => null,
        'allotment_id' => null,
        'status' => null,
        'message' => null,
        'created' => 'date-time',
        'completed' => 'date-time',
        'entity_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'entity' => 'entity',
        'action' => 'action',
        'cancellation_id' => 'cancellationId',
        'reservation_id' => 'reservationId',
        'booking_confirmation_id' => 'bookingConfirmationId',
        'profile_id' => 'profileId',
        'profile_ids' => 'profileIds',
        'allotment_id' => 'allotmentId',
        'status' => 'status',
        'message' => 'message',
        'created' => 'created',
        'completed' => 'completed',
        'entity_ids' => 'entityIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'entity' => 'setEntity',
        'action' => 'setAction',
        'cancellation_id' => 'setCancellationId',
        'reservation_id' => 'setReservationId',
        'booking_confirmation_id' => 'setBookingConfirmationId',
        'profile_id' => 'setProfileId',
        'profile_ids' => 'setProfileIds',
        'allotment_id' => 'setAllotmentId',
        'status' => 'setStatus',
        'message' => 'setMessage',
        'created' => 'setCreated',
        'completed' => 'setCompleted',
        'entity_ids' => 'setEntityIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'entity' => 'getEntity',
        'action' => 'getAction',
        'cancellation_id' => 'getCancellationId',
        'reservation_id' => 'getReservationId',
        'booking_confirmation_id' => 'getBookingConfirmationId',
        'profile_id' => 'getProfileId',
        'profile_ids' => 'getProfileIds',
        'allotment_id' => 'getAllotmentId',
        'status' => 'getStatus',
        'message' => 'getMessage',
        'created' => 'getCreated',
        'completed' => 'getCompleted',
        'entity_ids' => 'getEntityIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['cancellation_id'] = isset($data['cancellation_id']) ? $data['cancellation_id'] : null;
        $this->container['reservation_id'] = isset($data['reservation_id']) ? $data['reservation_id'] : null;
        $this->container['booking_confirmation_id'] = isset($data['booking_confirmation_id']) ? $data['booking_confirmation_id'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['profile_ids'] = isset($data['profile_ids']) ? $data['profile_ids'] : null;
        $this->container['allotment_id'] = isset($data['allotment_id']) ? $data['allotment_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['entity_ids'] = isset($data['entity_ids']) ? $data['entity_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return string|null
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string|null $entity Type of object. For example RESERVATION, PROFILE
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string|null $action Action of the operation. For example CREATE, UPDATE
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets cancellation_id
     *
     * @return string|null
     */
    public function getCancellationId()
    {
        return $this->container['cancellation_id'];
    }

    /**
     * Sets cancellation_id
     *
     * @param string|null $cancellation_id cancellation_id
     *
     * @return $this
     */
    public function setCancellationId($cancellation_id)
    {
        $this->container['cancellation_id'] = $cancellation_id;

        return $this;
    }

    /**
     * Gets reservation_id
     *
     * @return string|null
     */
    public function getReservationId()
    {
        return $this->container['reservation_id'];
    }

    /**
     * Sets reservation_id
     *
     * @param string|null $reservation_id reservation_id
     *
     * @return $this
     */
    public function setReservationId($reservation_id)
    {
        $this->container['reservation_id'] = $reservation_id;

        return $this;
    }

    /**
     * Gets booking_confirmation_id
     *
     * @return string|null
     */
    public function getBookingConfirmationId()
    {
        return $this->container['booking_confirmation_id'];
    }

    /**
     * Sets booking_confirmation_id
     *
     * @param string|null $booking_confirmation_id booking_confirmation_id
     *
     * @return $this
     */
    public function setBookingConfirmationId($booking_confirmation_id)
    {
        $this->container['booking_confirmation_id'] = $booking_confirmation_id;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string|null
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string|null $profile_id profile_id
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets profile_ids
     *
     * @return string[]|null
     */
    public function getProfileIds()
    {
        return $this->container['profile_ids'];
    }

    /**
     * Sets profile_ids
     *
     * @param string[]|null $profile_ids profile_ids
     *
     * @return $this
     */
    public function setProfileIds($profile_ids)
    {
        $this->container['profile_ids'] = $profile_ids;

        return $this;
    }

    /**
     * Gets allotment_id
     *
     * @return string|null
     */
    public function getAllotmentId()
    {
        return $this->container['allotment_id'];
    }

    /**
     * Sets allotment_id
     *
     * @param string|null $allotment_id allotment_id
     *
     * @return $this
     */
    public function setAllotmentId($allotment_id)
    {
        $this->container['allotment_id'] = $allotment_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return \DateTime|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param \DateTime|null $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets entity_ids
     *
     * @return string[]|null
     */
    public function getEntityIds()
    {
        return $this->container['entity_ids'];
    }

    /**
     * Sets entity_ids
     *
     * @param string[]|null $entity_ids entity_ids
     *
     * @return $this
     */
    public function setEntityIds($entity_ids)
    {
        $this->container['entity_ids'] = $entity_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


